{
    var trig, note, son, sweep;

	// Random.
    trig = CoinGate.kr(0.5, Impulse.kr(2));

	// Generator like of signals pulls ugen basic unit.
    note = Demand.kr(trig, 0, Dseq((22,24..44).midicps.scramble, inf));

	// Oscillator.
    sweep = LFSaw.ar(Demand.kr(trig, 0, Drand([1, 2, 2, 3, 4, 5, 6, 8, 16], inf))).exprange(40, 5000)
    son = LFSaw.ar(note * [0.99, 1, 1.01]).sum;
	
	// Filter.
    son = LPF.ar(son, sweep);   
	
	// Normalizes the filter's amplitude.
    son = Normalizer.ar(son);
	// Increases Filter.
    son = son + BPF.ar(son, 2000, 2);

    // Pick output from array.
    son = Select.ar(TRand.kr(trig: trig) < 0.05, [son, HPF.ar(son, 1000) * 4]);
    son = Select.ar(TRand.kr(trig: trig) < 0.05, [son, HPF.ar(son, sweep) * 4]);
    son = Select.ar(TRand.kr(trig: trig) < 0.05, [son, son.round(0.1)]);
    son = (son * 5).tanh;
    son = son + GVerb.ar(son, 10, 0.1, 0.7, mul: 0.3);
	
	// Loop like.
    son.dup
}.play
